services:
  redis:
    image: bitnami/redis:7.2.4
    hostname: "redis{{.Task.Slot}}"
    entrypoint:
      - /bin/sh
      - -c
      - |
        if [ $$HOSTNAME = 'redis1' ]; then
          export REDIS_REPLICATION_MODE="master"
        else
          export REDIS_REPLICATION_MODE="replica"
          while ! (redis-cli -h $$REDIS_MASTER_HOST -a $$REDIS_MASTER_PASSWORD ping | grep PONG) >/dev/null 2>&1; do 
            sleep 3
            echo "Waiting for $$REDIS_MASTER_HOST..."
          done
        fi
        exec /opt/bitnami/scripts/redis/entrypoint.sh /opt/bitnami/scripts/redis/run.sh
    volumes:
      - /etc/localtime:/etc/localtime:ro
    environment: 
      REDIS_MASTER_HOST: redis1
      REDIS_MASTER_PORT_NUMBER: 6379
      REDIS_MASTER_PASSWORD: redis
      REDIS_PASSWORD: redis
      REDIS_EXTRA_FLAGS: --replica-announce-ip redis{{.Task.Slot}}
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a $$REDIS_PASSWORD ping | grep PONG"]
      interval: 30s
      timeout: 10s
      retries: 4
      start_period: 30s
    deploy:
      replicas: 3
      placement:
        max_replicas_per_node: 1
      update_config:
        parallelism: 1
        order: stop-first
        failure_action: rollback
        delay: 60s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: any
        delay: 30s
        max_attempts: 5
        window: 210s
      resources:
        limits:
          cpus: '2'
          memory: 4G


  redis-sentinel:
    image: bitnami/redis-sentinel:7.2.4
    hostname: "redis-sentinel{{.Task.Slot}}"
    entrypoint:
      - /bin/bash
      - -c
      - |
        while ! (redis-cli -h $$REDIS_MASTER_HOST -a $$REDIS_MASTER_PASSWORD ping | grep PONG) >/dev/null 2>&1; do 
          sleep 3
          echo "Waiting for $$REDIS_MASTER_HOST..."
        done
        exec /opt/bitnami/scripts/redis-sentinel/entrypoint.sh /opt/bitnami/scripts/redis-sentinel/run.sh
    volumes:
      - /etc/localtime:/etc/localtime:ro
    environment:
      REDIS_MASTER_SET: master
      REDIS_MASTER_PASSWORD: redis
      REDIS_SENTINEL_DOWN_AFTER_MILLISECONDS: 5000
      REDIS_SENTINEL_RESOLVE_HOSTNAMES: "yes"
      REDIS_SENTINEL_ANNOUNCE_HOSTNAMES: "yes"
      REDIS_SENTINEL_ANNOUNCE_IP: redis-sentinel{{.Task.Slot}}
      REDIS_MASTER_HOST: redis1
      REDIS_MASTER_PORT_NUMBER: 6379
      REDIS_SENTINEL_PORT_NUMBER: 26379
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -p $$REDIS_SENTINEL_PORT_NUMBER SENTINEL sentinels $$REDIS_MASTER_SET | grep sentinel"]
      interval: 30s
      timeout: 10s
      retries: 4
      start_period: 30s
    deploy:
      replicas: 3
      placement:
        max_replicas_per_node: 1
      update_config:
        parallelism: 1
        order: stop-first
        failure_action: rollback
        delay: 60s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: any
        delay: 30s
        max_attempts: 5
        window: 210s
      resources:
        limits:
          cpus: '2'
          memory: 4G